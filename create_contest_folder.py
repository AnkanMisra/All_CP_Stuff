import os
from datetime import datetime
import pytz
import sys

INSTRUCTIONS_MD_CONTENT = """\
## Instructions for Generating `readme.md` and `soln.md`

---

### For `readme.md`

**Purpose:**  
To provide a clear, well-structured problem description, formatted for easy reading and reference.

**Content Requirements:**
- Problem title.
- Problem description (as given, but reworded for clarity if needed).
- Input format.
- Output format.
- Constraints (if provided).
- At least two example inputs and outputs (if available).
- Explanatory notes if present in the original problem.

**Formatting Rules:**
- All content must be enclosed within a single Markdown code block (triple backticks).
- Use Markdown headings (`#`, `##`, etc.) and bullet points for clarity.
- Do **not** use LaTeX for mathematical expressions or variables; write variables like `n`, `k`, `a_i` directly.
- **Bold Highlighting:** Use double asterisks (**text**) to highlight important parts such as:
  - Key constraints and objectives in problem description
  - Important parameters in input/output format
  - Critical insights in explanations and notes
  - Constraint values and limits
- **Code Formatting:** Use backticks (`text`) for:
  - Input/output values in examples (e.g., `arr[] = [1, 2, 3], k = 2`)
  - Array transformations and data structures (e.g., `[2, 3, 4, 6, 2]`)
  - Mathematical expressions and results
- Input/Output examples should be presented as plain text, not as code blocks within the main block.
- Do **not** include any code in `readme.md`, even if the original problem statement provides it.
- No redundant information; only include what is directly relevant to the problem statement.

---

### For `soln.md`

**Purpose:**  
To provide a clear and concise explanation of the solution approach, without any code.

**Content Requirements:**
- **Intuition:** Briefly explain the main idea or core insight behind the solution.
- **Approach:** Describe the high-level, step-by-step method or algorithm used.
- **Algorithm:** (Optional, but include if the approach needs more detailed steps.) Outline the algorithm in clear, numbered steps.
- **Complexity:** State the time and space complexity using bullet points. Use standard complexity notation (e.g., O(N log N), O(1)).
- **Summary:** Summarize why the approach works and any key takeaways or corner cases.

**Formatting Rules:**
- All content must be enclosed within a single Markdown code block (triple backticks).
- Use Markdown headings (`# Solution Explanation`, `## Intuition`, etc.) and bullet points for clarity.
- **Bold Highlighting:** Use double asterisks (**text**) to highlight important parts such as:
  - Key algorithm concepts and approaches
  - Time and space complexity values
  - Critical insights and core ideas
  - Important algorithmic steps
- **Code Formatting:** Use backticks (`text`) for:
  - Variable names and mathematical expressions
  - Complexity notations (e.g., `O(n log n)`, `O(1)`)
  - Data structure references (e.g., `array`, `stack`, `queue`)
- Do **not** include ANY code in `soln.md`. Describe the algorithm purely in prose.
- Do **not** use LaTeX for mathematical expressions or variables; write variables like `n`, `k`, `a_i` directly.
- The code block should be the last thing in the fileâ€”no explanations or notes after the code block.

---

### General Rules for Both Files

- **Single Code Block:** The entire content for each file must be wrapped in a single set of triple backticks. There should be no internal triple backticks within these main blocks.
- **Plain Text Variables:** Write variables like `n`, `m`, `k`, `a_i` directly, without any special formatting.
- **Bold Formatting for Emphasis:** Use double asterisks (**) to make important information stand out and improve readability.
- **Code Formatting:** Use single backticks (`) for input/output values, mathematical expressions, complexity notations, and data structures.
- **No Redundant Information:** Only include information directly relevant to the problem description (for `readme.md`) or the solution explanation (for `soln.md`).
- **Conciseness:** Be clear and complete, but avoid unnecessary verbosity.

---

### Formatting Examples

**Bold Highlighting Examples:**
- Problem objective: "You have to **maximize the minimum height** of all flowers"
- Key constraints: "In one day you can water **w continuous flowers**"
- Important results: "Final minimum height = **min(2, 3, 4, 7, 3) = 2**"

**Code Formatting Examples:**
- Input values: **Input:** `arr[] = [2, 3, 4, 5, 1], k = 2, w = 2`
- Output values: **Output:** `2`
- Array transformations: "arr becomes `[2, 3, 4, 6, 2]`"
- Complexity: "Time complexity: `O(n log n)`"

### Example Structure

> The example structure for both `readme.md` and `soln.md` is already present in the respective files generated by this system. You do not need to add or repeat the example structure; just follow the format as shown in the generated files.

---
"""

SOLUTION_MD_TEMPLATE = """\

# Solution Explanation

## Intuition
[Main idea]

## Approach
[Step-by-step method]

## Complexity
- Time Complexity: O(...)
- Space Complexity: O(...)

## Summary
[Why the approach works, key takeaways, corner cases]

"""

README_MD_TEMPLATE = """\

# Problem: [Title]

## Problem Description
[Description]

## Input Format
[Input details]

## Output Format
[Output details]

## Examples

### Input
[example input]

### Output
[example output]

## Constraints
[constraints]

## Notes
[any additional notes]

"""

def get_user_input(prompt_text):
    print(prompt_text, end="", file=sys.stderr, flush=True)
    return sys.stdin.readline().strip()

def ordinal(n):
    if 10 <= n % 100 <= 20:
        suffix = "th"
    else:
        suffix = {1: "st", 2: "nd", 3: "rd"}.get(n % 10, "th")
    return f"{n}{suffix}"

def print_header(text, file=sys.stderr):
    print("\n" + "=" * 40, file=file)
    print(text, file=file)
    print("=" * 40 + "\n", file=file)

def platform_fullname(shortcut, folder_type):
    shortcut = shortcut.lower()
    if shortcut in ["l", "leetcode"]:
        return "LC_Daily" if folder_type == "daily" else "LC_Contest"
    if shortcut in ["c", "codeforces"]:
        return "CF_Daily" if folder_type == "daily" else "CF_Contest"
    if shortcut in ["g", "gfg"]:
        return "GFG_Daily" if folder_type == "daily" else "GFG_Contest"
    return shortcut

def folder_type_fullname(shortcut):
    shortcut = shortcut.lower()
    if shortcut in ["d", "daily"]:
        return "daily"
    if shortcut in ["c", "contest"]:
        return "contest"
    if shortcut in ["e", "extra"]:
        return "extra"
    return shortcut

def create_files_in_folder(folder, is_daily, num_questions=0):
    try:
        if is_daily:
            os.makedirs(folder, exist_ok=True)
            filenames = ["readme.md", "Solution.md", "Solution.java", "instructions.md"]
            for fname in filenames:
                file_path = os.path.join(folder, fname)
                with open(file_path, "w") as f:
                    if fname == "readme.md":
                        f.write(README_MD_TEMPLATE)
                    elif fname == "Solution.md":
                        f.write(SOLUTION_MD_TEMPLATE)
                    elif fname == "instructions.md":
                        f.write(INSTRUCTIONS_MD_CONTENT)
                print(f"  Created file: {file_path}", file=sys.stderr)
        else:
            os.makedirs(folder, exist_ok=True)
            for i in range(1, num_questions + 1):
                q_folder = os.path.join(folder, f"q{i}")
                os.makedirs(q_folder, exist_ok=True)
                print(f"  Created: {q_folder}", file=sys.stderr)
                filenames = ["readme.md", "Solution.md", "Solution.java", "instructions.md"]
                for fname in filenames:
                    file_path = os.path.join(q_folder, fname)
                    with open(file_path, "w") as f:
                        if fname == "readme.md":
                            f.write(README_MD_TEMPLATE)
                        elif fname == "Solution.md":
                            f.write(SOLUTION_MD_TEMPLATE)
                        elif fname == "instructions.md":
                            f.write(INSTRUCTIONS_MD_CONTENT)
                    print(f"    Created file: {file_path}", file=sys.stderr)
        return True
    except Exception as e:
        print(f"Error creating files: {e}", file=sys.stderr)
        return False

def create_extra_problem_folder(problem_name):
    try:
        base_folder = os.path.join("Extra_Solved_Problems", problem_name)
        os.makedirs(base_folder, exist_ok=True)
        filenames = ["readme.md", "Solution.md", "Solution.java", "instructions.md"]
        for fname in filenames:
            file_path = os.path.join(base_folder, fname)
            with open(file_path, "w") as f:
                if fname == "readme.md":
                    f.write(README_MD_TEMPLATE)
                elif fname == "Solution.md":
                    f.write(SOLUTION_MD_TEMPLATE)
                elif fname == "instructions.md":
                    f.write(INSTRUCTIONS_MD_CONTENT)
            print(f"  Created file: {file_path}", file=sys.stderr)
        return base_folder
    except Exception as e:
        print(f"Error creating extra problem folder: {e}", file=sys.stderr)
        return None

def main():
    print_header("Competitive Programming Folder Creator")
    
    folder_type_input = get_user_input(
        "Type of folder? (daily/contest/extra or d/c/e): "
    ).lower()
    folder_type = folder_type_fullname(folder_type_input)
    if folder_type not in ["daily", "contest", "extra"]:
        print(
            "Invalid folder type. Use 'daily' (or 'd'), 'contest' (or 'c'), or 'extra' (or 'e').",
            file=sys.stderr
        )
        return

    created = False
    path_to_change_into = None
    user_confirmed_ok = False

    if folder_type == "daily":
        platform_input = get_user_input(
            "Platform (l/c/g or leetcode/codeforces/gfg): "
        ).lower()
        platform = platform_fullname(platform_input, folder_type)
        tz = pytz.timezone("Asia/Kolkata")
        now = datetime.now(tz)
        date = now.day
        month = now.strftime("%B")
        folder_name = f"{ordinal(date)}{month}{now.year % 100}"
        month_folder = os.path.join(platform, month)
        full_folder_path = os.path.join(month_folder, folder_name)
        print(f"\nToday is {ordinal(date)} {month} {now.year}.", file=sys.stderr)
        print(
            f"This is the folder that will be created: {full_folder_path}",
            file=sys.stderr
        )
        ok = get_user_input("Is this OK? (y/n): ").lower()
        user_confirmed_ok = (ok == "y")
        if not user_confirmed_ok:
            print("Aborted.", file=sys.stderr)
            return
        created = create_files_in_folder(full_folder_path, is_daily=True)
        if created:
            path_to_change_into = full_folder_path
    elif folder_type == "contest":
        platform_input = get_user_input(
            "Platform (l/c/g or leetcode/codeforces/gfg): "
        ).lower()
        platform = platform_fullname(platform_input, folder_type)
        num_questions_str = ""
        if platform == "LC_Contest":
            wb = get_user_input("Weekly or Biweekly? (w/b): ").lower()
            contest_type = "Weekly" if wb == "w" else "Biweekly"
            contest_number = get_user_input("Contest number: ")
            num_questions_str = get_user_input("How many questions?: ")
            folder_name = f"{contest_type}{contest_number}"
        elif platform == "CF_Contest":
            contest_number = get_user_input("Contest Number: ")
            div_number = get_user_input("Div Number : ")
            num_questions_str = get_user_input("How many questions?: ")
            folder_name = f"{contest_number}_Div{div_number}"
        else:
            folder_name = get_user_input(
                "Contest folder name (e.g., Starters206): "
            )
            num_questions_str = get_user_input(
                "Number of questions in contest: "
            )
        
        try:
            num_questions = int(num_questions_str)
            if num_questions <= 0:
                print("Number of questions must be positive.", file=sys.stderr)
                return
        except ValueError:
            print("Invalid number of questions.", file=sys.stderr)
            return

        base_folder = os.path.join(platform, folder_name)
        print(f"\nThis is the folder that will be created: {base_folder}", file=sys.stderr)
        ok = get_user_input("Is this OK? (y/n): ").lower()
        user_confirmed_ok = (ok == "y")
        if not user_confirmed_ok:
            print("Aborted.", file=sys.stderr)
            return
        created = create_files_in_folder(
            base_folder, is_daily=False, num_questions=num_questions
        )
        if created:
            path_to_change_into = base_folder
    elif folder_type == "extra":
        problem_name = get_user_input("Enter the problem name: ")
        if not problem_name:
            print("Problem name cannot be empty.", file=sys.stderr)
            return
        base_folder = os.path.join("Extra_Solved_Problems", problem_name)
        print(f"\nThis is the folder that will be created: {base_folder}", file=sys.stderr)
        ok = get_user_input("Is this OK? (y/n): ").lower()
        user_confirmed_ok = (ok == "y")
        if not user_confirmed_ok:
            print("Aborted.", file=sys.stderr)
            return
        created_folder = create_extra_problem_folder(problem_name)
        if created_folder:
            created = True
            path_to_change_into = created_folder
        else:
            created = False
    else:
        print("Invalid folder type. Use 'daily', 'contest', or 'extra'.", file=sys.stderr)
        return

    if created and path_to_change_into:
        print_header("Folders and files created successfully!")
        try:
            os.chdir(path_to_change_into) # Script changes its own CWD
            print(f"Script's CWD changed to: {os.getcwd()}", file=sys.stderr)
            # Print ONLY the path to STDOUT for 'cd $(...)' to capture
            print(path_to_change_into, file=sys.stdout)
        except Exception as e:
            print(f"Error changing script's CWD: {e}", file=sys.stderr)
    elif user_confirmed_ok and not created :
        print_header("There was an error creating folders/files.")

if __name__ == "__main__":
    try:
        main()
    except ImportError as e:
        if "pytz" in str(e):
            print(f"\nError: {e}", file=sys.stderr)
            print("The 'pytz' module is required but not found.", file=sys.stderr)
            print("Please install it by running: pip install pytz", file=sys.stderr)
            sys.exit(1)
        else:
            raise
    except Exception as e:
        print(f"An unexpected error occurred: {e}", file=sys.stderr)
        sys.exit(1)
